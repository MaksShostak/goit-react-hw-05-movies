{"version":3,"file":"static/js/132.0a691eb2.chunk.js","mappings":"oSACaA,EAAYC,EAAAA,GAAAA,IAAH,iEAITC,EAASD,EAAAA,GAAAA,GAAH,oQAaNE,EAAOF,EAAAA,GAAAA,GAAH,yCAGJG,EAAOH,EAAAA,GAAAA,GAAH,4IAOJI,EAAWJ,EAAAA,GAAAA,EAAH,4GAMRK,EAAOL,EAAAA,GAAAA,KAAH,iI,SCgCjB,EA3DgB,WACd,OAA8BM,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGL,GAAW,GAFd,UAGwBM,EAAAA,EAAAA,IAAgBH,GAHxC,OAGSI,EAHT,OAIGT,EAAWS,GAJd,gDAMGL,GAAS,GACTM,QAAQP,MAAR,MAPH,yBASGD,GAAW,GATd,2EAAD,EAYD,GAAE,CAACG,IAECN,GAIH,UAACR,EAAD,YACE,SAACE,EAAD,sBACCQ,IAAW,SAACU,EAAA,EAAD,IACXR,IACC,sFAEM,OAAPJ,QAAO,IAAPA,GAAAA,EAASa,QACR,SAAClB,EAAD,UACGK,IAAO,OACNA,QADM,IACNA,OADM,EACNA,EAASc,KAAI,SAAAC,GAAG,OACd,UAACnB,EAAD,YACE,UAACC,EAAD,sBAAmBkB,EAAIC,OAAOC,kBAC9B,UAACpB,EAAD,WACG,KACD,SAACC,EAAD,sBACCiB,EAAIG,YAEP,UAACrB,EAAD,6BACkB,IACf,IAAIsB,KAAKJ,EAAIK,YAAYC,0BATnBN,EAAIO,GADD,QAgBpB,sEA5BG,IAgCV,C,4MC5DDC,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMC,EAAiC,QACjCC,EAAiC,OAEhC,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBL,IAAAA,IAAA,mBACTE,EADS,YACUC,GAC/B,CACEG,OAAQ,CACNC,KAAMF,KALP,uBACGG,EADH,EACGA,KADH,kBAUEA,EAAKC,SAVP,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBX,IAAAA,IAAA,gBAA2B,CAChDM,OAAQ,CACNM,MAAOD,KAHN,uBACGH,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kEAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgC9B,GAAhC,yFACkBiB,IAAAA,IAAA,iBAAoBjB,GAAW,CACpDuB,OAAQ,CACNQ,SAAU/B,KAHT,uBACGyB,EADH,EACGA,KADH,kBAOEA,GAPF,kEAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAmChC,GAAnC,yFACkBiB,IAAAA,IAAA,iBAAoBjB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNQ,SAAU/B,KAHT,uBACGyB,EADH,EACGA,KADH,kBAOEA,EAAKQ,MAPP,kEAUA,SAAe9B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFACkBiB,IAAAA,IAAA,iBAAoBjB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNQ,SAAU/B,KAHT,uBACGyB,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kE","sources":["components/Reviews/Review.styled.js","components/Reviews/Reviews.jsx","services/ApiRequests.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Container = styled.div`\n  margin-bottom: 20px;\n  padding: 5px;\n`;\nexport const Tittle = styled.h2`\n  padding: 5px 20px;\n  margin-bottom: 10px;\n  cursor: pointer;\n  transition: all 500ms ease-out;\n  &:hover {\n    color: crimson;\n    transform: scale(1.02);\n  }\n  border-bottom: 3px solid gray;\n  box-shadow: 2px 2px 2px grey;\n`;\n\nexport const List = styled.ul`\n  padding: 5px;\n`;\nexport const Item = styled.li`\n  margin-bottom: 20px;\n  color: black;\n  font-size: 24px;\n  font-weight: 500;\n  border-bottom: 1px solid gray;\n`;\nexport const CastInfo = styled.p`\n  margin-bottom: 10px;\n  color: #59072b;\n  font-size: 20px;\n  font-weight: 600;\n`;\nexport const Span = styled.span`\n  margin-bottom: 20px;\n  display: block;\n\n  color: #59072b;\n  font-size: 20px;\n  font-weight: 600;\n`;\n","import { useState, useEffect } from 'react';\nimport Spiner from 'components/Spiner/Spiner';\nimport { getMoviesReview } from 'services/ApiRequests';\nimport { useParams } from 'react-router-dom';\n// import PropTypes from 'prop-types';\nimport { Container, Tittle, List, Item, CastInfo, Span } from './Review.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesReview(movieId);\n        setReviews(result);\n      } catch (error) {\n        setError(true);\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  if (!reviews) {\n    return null;\n  }\n  return (\n    <Container>\n      <Tittle>Reviews</Tittle>\n      {loading && <Spiner />}\n      {error && (\n        <p>Something went wrong, please reload the page and try again</p>\n      )}\n      {reviews?.length ? (\n        <List>\n          {reviews &&\n            reviews?.map(rev => (\n              <Item key={rev.id}>\n                <CastInfo>Aurhor: {rev.author.toUpperCase()}</CastInfo>\n                <CastInfo>\n                  {' '}\n                  <Span>Review:</Span>\n                  {rev.content}\n                </CastInfo>\n                <CastInfo>\n                  Date of raview:{' '}\n                  {new Date(rev.created_at).toLocaleDateString()}\n                </CastInfo>\n              </Item>\n            ))}\n        </List>\n      ) : (\n        <p>We don't have any reviws for this movie</p>\n      )}\n    </Container>\n  );\n};\n\n// Reviews.propTypes = {};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'f52fb5605503f66e762d80f647488744',\n};\n\nconst mediaType = { all: 'all', movie: 'movie', tv: 'tv', person: 'person' };\nconst timeWindow = { day: 'day', week: 'week' };\n\nexport async function getTrendingMedia(pageNamber) {\n  const { data } = await axios.get(\n    `trending/${mediaType.movie}/${timeWindow.week}`,\n    {\n      params: {\n        page: pageNamber,\n      },\n    }\n  );\n\n  return data.results;\n}\n\nexport async function getSearchMovies(searchParam) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query: searchParam,\n    },\n  });\n  // console.log(data);\n  return data.results;\n}\n\nexport async function getAllInfoMovies(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data);\n  return data;\n}\n\nexport async function getMoviesActorsCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.cast);\n  return data.cast;\n}\n\nexport async function getMoviesReview(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.results);\n  return data.results;\n}\n\nexport const useApi = () => {\n  return {\n    getTrendingMedia,\n    getSearchMovies,\n    getAllInfoMovies,\n    getMoviesActorsCast,\n    getMoviesReview,\n  };\n};\n"],"names":["Container","styled","Tittle","List","Item","CastInfo","Span","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","useEffect","getMoviesReview","result","console","Spiner","length","map","rev","author","toUpperCase","content","Date","created_at","toLocaleDateString","id","axios","api_key","mediaType","timeWindow","getTrendingMedia","pageNamber","params","page","data","results","getSearchMovies","searchParam","query","getAllInfoMovies","movie_id","getMoviesActorsCast","cast"],"sourceRoot":""}