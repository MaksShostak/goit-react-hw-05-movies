{"version":3,"file":"static/js/387.57b14f18.chunk.js","mappings":"oSACaA,EAAYC,EAAAA,GAAAA,IAAH,iEAITC,EAASD,EAAAA,GAAAA,GAAH,oQAaNE,EAAOF,EAAAA,GAAAA,GAAH,yHAOJG,EAAOH,EAAAA,GAAAA,GAAH,2HAOJI,EAAYJ,EAAAA,GAAAA,EAAH,yGAMTK,EAAOL,EAAAA,GAAAA,KAAH,4H,SCwCjB,EAvEa,WACX,OAAwBM,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGL,GAAW,GAFd,UAGwBM,EAAAA,EAAAA,IAAoBH,GAH5C,OAGSI,EAHT,OAIGT,EAAQS,GAJX,gDAMGL,GAAS,GACTM,QAAQP,MAAR,MAPH,yBASGD,GAAW,GATd,2EAAD,EAYD,GAAE,CAACG,IAECN,GAKH,UAACR,EAAD,YACE,SAACE,EAAD,mBACCQ,IAAW,SAACU,EAAA,EAAD,IACXR,IACC,sFAEG,OAAJJ,QAAI,IAAJA,GAAAA,EAAMa,QACL,SAAClB,EAAD,iBACGK,QADH,IACGA,OADH,EACGA,EAAMc,KAAI,SAAAC,GAAE,OACX,UAACnB,EAAD,YACE,UAACC,EAAD,WACG,KACD,SAACC,EAAD,uBAFF,IAEyBiB,EAAGC,UAAUC,kBAEtC,UAACpB,EAAD,WACG,KACD,SAACC,EAAD,0BAFF,IAE4BiB,EAAGG,SAE/B,SAACrB,EAAD,UACGkB,EAAGI,cACF,gBACEC,IAAG,wCAAmCL,EAAGI,cACzCE,IAAI,MAGN,gBACED,IAAI,+DACJC,IAAI,GACJC,MAAO,UAnBJP,EAAGQ,GADH,OA4Bf,gFAxCG,IA4CV,C,4MCxEDC,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMC,EAAiC,QACjCC,EAAiC,OAEhC,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBL,IAAAA,IAAA,mBACTE,EADS,YACUC,GAC/B,CACEG,OAAQ,CACNC,KAAMF,KALP,uBACGG,EADH,EACGA,KADH,kBAUEA,EAAKC,SAVP,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBX,IAAAA,IAAA,gBAA2B,CAChDM,OAAQ,CACNM,MAAOD,KAHN,uBACGH,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kEAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgC/B,GAAhC,yFACkBkB,IAAAA,IAAA,iBAAoBlB,GAAW,IADjD,uBACG0B,EADH,EACGA,KADH,kBAOEA,GAPF,kEAUA,SAAevB,EAAtB,+CAAO,OAAP,oBAAO,WAAmCH,GAAnC,yFACkBkB,IAAAA,IAAA,iBAAoBlB,EAApB,YAAuC,IADzD,uBACG0B,EADH,EACGA,KADH,kBAOEA,EAAKhC,MAPP,kEAUA,SAAesC,EAAtB,kC,aAAO,O,oBAAA,WAA+BhC,GAA/B,yFACkBkB,IAAAA,IAAA,iBAAoBlB,EAApB,YAAuC,IADzD,uBACG0B,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kE","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/ApiRequests.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Container = styled.div`\n  margin-bottom: 20px;\n  padding: 5px;\n`;\nexport const Tittle = styled.h2`\n  padding: 5px 20px;\n  margin-bottom: 10px;\n  cursor: pointer;\n  transition: all 500ms ease-out;\n  &:hover {\n    color: crimson;\n    transform: scale(1.02);\n  }\n  border-bottom: 3px solid gray;\n  box-shadow: 2px 2px 2px grey;\n`;\n\nexport const List = styled.ul`\n  padding: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  justify-content: center;\n`;\nexport const Item = styled.li`\n  margin-bottom: 20px;\n  color: black;\n  font-size: 24px;\n  font-weight: 500;\n  width: 200px;\n`;\nexport const ActorInfo = styled.p`\n  margin-top: 10px;\n  color: #59072b;\n  font-size: 20px;\n  font-weight: 600;\n`;\nexport const Span = styled.span`\n  display: block;\n  margin-top: 10px;\n  color: #59072b;\n  font-size: 20px;\n  font-weight: 600;\n`;\n","import { useState, useEffect } from 'react';\nimport Spiner from 'components/Spiner/Spiner';\nimport { getMoviesActorsCast } from 'services/ApiRequests';\nimport { useParams } from 'react-router-dom';\n// import PropTypes from 'prop-types';\nimport { Container, Tittle, List, Item, ActorInfo, Span } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesActorsCast(movieId);\n        setCast(result);\n      } catch (error) {\n        setError(true);\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <Tittle>Cast</Tittle>\n      {loading && <Spiner />}\n      {error && (\n        <p>Something went wrong, please reload the page and try again</p>\n      )}\n      {cast?.length ? (\n        <List>\n          {cast?.map(el => (\n            <Item key={el.id}>\n              <ActorInfo>\n                {' '}\n                <Span> Author:</Span> {el.character.toUpperCase()}\n              </ActorInfo>\n              <ActorInfo>\n                {' '}\n                <Span>Actor name:</Span> {el.name}\n              </ActorInfo>\n              <ActorInfo>\n                {el.profile_path ? (\n                  <img\n                    src={`http://image.tmdb.org/t/p/w185${el.profile_path}`}\n                    alt=\"\"\n                  />\n                ) : (\n                  <img\n                    src=\"https://www.drupal.org/files/project-images/broken-image.jpg\"\n                    alt=\"\"\n                    width={185}\n                  />\n                )}\n              </ActorInfo>\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p>We don't have any cast information for this movie</p>\n      )}\n    </Container>\n  );\n};\n\n// Cast.propTypes = {};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'f52fb5605503f66e762d80f647488744',\n};\n\nconst mediaType = { all: 'all', movie: 'movie', tv: 'tv', person: 'person' };\nconst timeWindow = { day: 'day', week: 'week' };\n\nexport async function getTrendingMedia(pageNamber) {\n  const { data } = await axios.get(\n    `trending/${mediaType.movie}/${timeWindow.week}`,\n    {\n      params: {\n        page: pageNamber,\n      },\n    }\n  );\n\n  return data.results;\n}\n\nexport async function getSearchMovies(searchParam) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query: searchParam,\n    },\n  });\n  // console.log(data);\n  return data.results;\n}\n\nexport async function getAllInfoMovies(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    // params: {\n    //   movie_id: movieId,\n    // },\n  });\n  // console.log(data);\n  return data;\n}\n\nexport async function getMoviesActorsCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`, {\n    // params: {\n    //   movie_id: movieId,\n    // },\n  });\n  // console.log(data.cast);\n  return data.cast;\n}\n\nexport async function getMoviesReview(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n    // params: {\n    //   movie_id: movieId,\n    // },\n  });\n  // console.log(data.results);\n  return data.results;\n}\n\n// export const useApi = () => {\n//   return {\n//     getTrendingMedia,\n//     getSearchMovies,\n//     getAllInfoMovies,\n//     getMoviesActorsCast,\n//     getMoviesReview,\n//   };\n// };\n"],"names":["Container","styled","Tittle","List","Item","ActorInfo","Span","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","getMoviesActorsCast","result","console","Spiner","length","map","el","character","toUpperCase","name","profile_path","src","alt","width","id","axios","api_key","mediaType","timeWindow","getTrendingMedia","pageNamber","params","page","data","results","getSearchMovies","searchParam","query","getAllInfoMovies","getMoviesReview"],"sourceRoot":""}