{"version":3,"file":"static/js/247.6dfcc021.chunk.js","mappings":"wOA4EA,UAtEa,SAAAA,GACX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAjBAE,QAAQC,IAAIH,IAEZI,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGP,GAAW,GAFd,UAGwBQ,EAAAA,EAAAA,IAAoBL,GAH5C,OAGSM,EAHT,OAIGX,EAAQW,GAJX,gDAMGP,GAAS,GACTG,QAAQJ,MAAR,MAPH,yBASGD,GAAW,GATd,2EAAD,EAYD,GAAE,CAACG,IAECN,GAKH,4BACE,iCACCE,IAAW,SAAC,IAAD,IACXE,IACC,sFAEG,OAAJJ,QAAI,IAAJA,GAAAA,EAAMa,QACL,4BACE,wBACGb,EAAKa,SAAL,OACCb,QADD,IACCA,OADD,EACCA,EAAMc,KAAI,SAAAC,GAAE,OACV,2BACE,qCAAaA,EAAGC,UAAUC,kBAC1B,6BAAKF,EAAGG,SACR,uBACGH,EAAGI,cACF,gBACEC,IAAG,wCAAmCL,EAAGI,cACzCE,IAAI,MAGN,gBACED,IAAI,+DACJC,IAAI,GACJC,MAAO,UAbNP,EAAGQ,GADF,QAqBhB,uBAGF,gFAtCG,IA0CV,C,4MCtEDC,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMC,EAAiC,QACjCC,EAAiC,OAEhC,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBL,IAAAA,IAAA,mBACTE,EADS,YACUC,GAC/B,CACEG,OAAQ,CACNC,KAAMF,KALP,uBACGG,EADH,EACGA,KADH,kBAUEA,EAAKC,SAVP,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBX,IAAAA,IAAA,gBAA2B,CAChDM,OAAQ,CACNM,MAAOD,KAHN,uBACGH,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kEAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgC/B,GAAhC,yFACkBkB,IAAAA,IAAA,iBAAoBlB,GAAW,CACpDwB,OAAQ,CACNQ,SAAUhC,KAHT,uBACG0B,EADH,EACGA,KADH,kBAOEA,GAPF,kEAUA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAAmCL,GAAnC,yFACkBkB,IAAAA,IAAA,iBAAoBlB,EAApB,YAAuC,CAC5DwB,OAAQ,CACNQ,SAAUhC,KAHT,uBACG0B,EADH,EACGA,KADH,kBAOEA,EAAKhC,MAPP,kEAUA,SAAeuC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BjC,GAA/B,yFACkBkB,IAAAA,IAAA,iBAAoBlB,EAApB,YAAuC,CAC5DwB,OAAQ,CACNQ,SAAUhC,KAHT,uBACG0B,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kE","sources":["components/Cast/Cast.jsx","services/ApiRequests.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Spiner from 'components/Spiner/Spiner';\nimport { getMoviesActorsCast } from 'services/ApiRequests';\nimport { useParams } from 'react-router-dom';\n// import PropTypes from 'prop-types';\n\nconst Cast = props => {\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n  console.log(movieId);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesActorsCast(movieId);\n        setCast(result);\n      } catch (error) {\n        setError(true);\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      {loading && <Spiner />}\n      {error && (\n        <p>Something went wrong, please reload the page and try again</p>\n      )}\n      {cast?.length ? (\n        <div>\n          <ul>\n            {cast.length &&\n              cast?.map(el => (\n                <li key={el.id}>\n                  <p> Aurhor: {el.character.toUpperCase()}</p>\n                  <p> {el.name}</p>\n                  <p>\n                    {el.profile_path ? (\n                      <img\n                        src={`http://image.tmdb.org/t/p/w185${el.profile_path}`}\n                        alt=\"\"\n                      />\n                    ) : (\n                      <img\n                        src=\"https://www.drupal.org/files/project-images/broken-image.jpg\"\n                        alt=\"\"\n                        width={185}\n                      />\n                    )}\n                  </p>\n                </li>\n              ))}\n          </ul>\n          <div></div>\n        </div>\n      ) : (\n        <p>We don't have any cast information for this movie</p>\n      )}\n    </div>\n  );\n};\n\n// Cast.propTypes = {};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'f52fb5605503f66e762d80f647488744',\n};\n\nconst mediaType = { all: 'all', movie: 'movie', tv: 'tv', person: 'person' };\nconst timeWindow = { day: 'day', week: 'week' };\n\nexport async function getTrendingMedia(pageNamber) {\n  const { data } = await axios.get(\n    `trending/${mediaType.movie}/${timeWindow.week}`,\n    {\n      params: {\n        page: pageNamber,\n      },\n    }\n  );\n\n  return data.results;\n}\n\nexport async function getSearchMovies(searchParam) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query: searchParam,\n    },\n  });\n  // console.log(data);\n  return data.results;\n}\n\nexport async function getAllInfoMovies(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data);\n  return data;\n}\n\nexport async function getMoviesActorsCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.cast);\n  return data.cast;\n}\n\nexport async function getMoviesReview(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.results);\n  return data.results;\n}\n\nexport const useApi = () => {\n  return {\n    getTrendingMedia,\n    getSearchMovies,\n    getAllInfoMovies,\n    getMoviesActorsCast,\n    getMoviesReview,\n  };\n};\n"],"names":["props","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","console","log","useEffect","getMoviesActorsCast","result","length","map","el","character","toUpperCase","name","profile_path","src","alt","width","id","axios","api_key","mediaType","timeWindow","getTrendingMedia","pageNamber","params","page","data","results","getSearchMovies","searchParam","query","getAllInfoMovies","movie_id","getMoviesReview"],"sourceRoot":""}