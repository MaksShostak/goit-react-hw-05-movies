{"version":3,"file":"static/js/186.3c5b1487.chunk.js","mappings":"uOAiEA,UA3DgB,SAAAA,GACd,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAjBAE,QAAQC,IAAIH,IAEZI,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGP,GAAW,GAFd,UAGwBQ,EAAAA,EAAAA,IAAgBL,GAHxC,OAGSM,EAHT,OAIGX,EAAWW,GAJd,gDAMGP,GAAS,GACTG,QAAQJ,MAAR,MAPH,yBASGD,GAAW,GATd,2EAAD,EAYD,GAAE,CAACG,IAECN,GAIH,4BACE,oCACCE,IAAW,SAAC,IAAD,IACXE,IACC,sFAEM,OAAPJ,QAAO,IAAPA,GAAAA,EAASa,QACR,0BACE,wBACGb,IAAO,OACNA,QADM,IACNA,OADM,EACNA,EAASc,KAAI,SAAAC,GAAG,OACd,2BACE,qCAAaA,EAAIC,OAAOC,kBACxB,oCACA,6BAAKF,EAAIG,YACT,2CACkB,IACf,IAAIC,KAAKJ,EAAIK,YAAYC,0BANrBN,EAAIO,GADC,UActB,sEA3BG,IA+BV,C,4MC3DDC,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMC,EAAiC,QACjCC,EAAiC,OAEhC,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBL,IAAAA,IAAA,mBACTE,EADS,YACUC,GAC/B,CACEG,OAAQ,CACNC,KAAMF,KALP,uBACGG,EADH,EACGA,KADH,kBAUEA,EAAKC,SAVP,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBX,IAAAA,IAAA,gBAA2B,CAChDM,OAAQ,CACNM,MAAOD,KAHN,uBACGH,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kEAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgC9B,GAAhC,yFACkBiB,IAAAA,IAAA,iBAAoBjB,GAAW,CACpDuB,OAAQ,CACNQ,SAAU/B,KAHT,uBACGyB,EADH,EACGA,KADH,kBAOEA,GAPF,kEAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAmChC,GAAnC,yFACkBiB,IAAAA,IAAA,iBAAoBjB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNQ,SAAU/B,KAHT,uBACGyB,EADH,EACGA,KADH,kBAOEA,EAAKQ,MAPP,kEAUA,SAAe5B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,yFACkBiB,IAAAA,IAAA,iBAAoBjB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNQ,SAAU/B,KAHT,uBACGyB,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kE","sources":["components/Reviews/Reviews.jsx","services/ApiRequests.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Spiner from 'components/Spiner/Spiner';\nimport { getMoviesReview } from 'services/ApiRequests';\nimport { useParams } from 'react-router-dom';\n// import PropTypes from 'prop-types';\n\nconst Reviews = props => {\n  const [reviews, setReviews] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const { movieId } = useParams();\n  console.log(movieId);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesReview(movieId);\n        setReviews(result);\n      } catch (error) {\n        setError(true);\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  if (!reviews) {\n    return null;\n  }\n  return (\n    <div>\n      <h2>Reviews</h2>\n      {loading && <Spiner />}\n      {error && (\n        <p>Something went wrong, please reload the page and try again</p>\n      )}\n      {reviews?.length ? (\n        <div>\n          <ul>\n            {reviews &&\n              reviews?.map(rev => (\n                <li key={rev.id}>\n                  <p> Aurhor: {rev.author.toUpperCase()}</p>\n                  <p>Review:</p>\n                  <p> {rev.content}</p>\n                  <p>\n                    Date of raview:{' '}\n                    {new Date(rev.created_at).toLocaleDateString()}\n                  </p>\n                </li>\n              ))}\n          </ul>\n        </div>\n      ) : (\n        <p>We don't have any reviws for this movie</p>\n      )}\n    </div>\n  );\n};\n\n// Reviews.propTypes = {};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'f52fb5605503f66e762d80f647488744',\n};\n\nconst mediaType = { all: 'all', movie: 'movie', tv: 'tv', person: 'person' };\nconst timeWindow = { day: 'day', week: 'week' };\n\nexport async function getTrendingMedia(pageNamber) {\n  const { data } = await axios.get(\n    `trending/${mediaType.movie}/${timeWindow.week}`,\n    {\n      params: {\n        page: pageNamber,\n      },\n    }\n  );\n\n  return data.results;\n}\n\nexport async function getSearchMovies(searchParam) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query: searchParam,\n    },\n  });\n  // console.log(data);\n  return data.results;\n}\n\nexport async function getAllInfoMovies(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data);\n  return data;\n}\n\nexport async function getMoviesActorsCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.cast);\n  return data.cast;\n}\n\nexport async function getMoviesReview(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.results);\n  return data.results;\n}\n\nexport const useApi = () => {\n  return {\n    getTrendingMedia,\n    getSearchMovies,\n    getAllInfoMovies,\n    getMoviesActorsCast,\n    getMoviesReview,\n  };\n};\n"],"names":["props","useState","reviews","setReviews","loading","setLoading","error","setError","movieId","useParams","console","log","useEffect","getMoviesReview","result","length","map","rev","author","toUpperCase","content","Date","created_at","toLocaleDateString","id","axios","api_key","mediaType","timeWindow","getTrendingMedia","pageNamber","params","page","data","results","getSearchMovies","searchParam","query","getAllInfoMovies","movie_id","getMoviesActorsCast","cast"],"sourceRoot":""}