{"version":3,"file":"static/js/114.e22954cb.chunk.js","mappings":"8MAEaA,EAAaC,EAAAA,GAAAA,GAAH,8CAGVC,EAAYD,EAAAA,GAAAA,GAAH,4GAKTE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,iQ,SCyBtB,EA/BkB,SAAC,GAAsB,IAApBI,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAG3B,OACE,SAACN,EAAD,UACGK,EAAOE,KAAI,SAAAC,GAAK,OACf,SAACN,EAAD,WACE,UAACC,EAAD,CACEM,GAAE,WAAKH,EAAKI,SAA8B,aAAxC,OACAF,EAAMG,IAERC,MAAO,CAAEC,KAAMP,GAJjB,UAMGE,EAAMM,OAASN,EAAMO,KAAM,QAPhBP,EAAMG,GADP,KActB,C,sLCpBYK,EAAgBf,EAAAA,GAAAA,IAAH,sEAIbgB,EAAShB,EAAAA,GAAAA,GAAH,yK,SCwDnB,EAhDa,WACX,OAA4BiB,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAec,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MAkBjB,OAfAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGL,GAAW,GAFd,UAGwBM,EAAAA,EAAAA,MAHxB,OAGSC,EAHT,OAIGT,EAAUS,GAJb,gDAMGL,GAAS,GACTM,QAAQP,MAAR,MAPH,yBASGD,GAAW,GATd,2EAAD,EAYD,GAAE,KAGD,UAACL,EAAD,YACE,SAACC,EAAD,iCACCG,IAAW,SAACU,EAAA,EAAD,IACXzB,EAAO0B,OAAS,IACf,SAACC,EAAA,EAAD,CAAW3B,OAAQA,EAAQC,KAAMkB,IAWlCF,IACC,wFAIP,C,4MCzDDW,IAAAA,SAAAA,QAAyB,gCACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGX,IAAMC,EAAiC,QACjCC,EAAiC,OAEhC,SAAeT,EAAtB,+CAAO,OAAP,oBAAO,WAAgCU,GAAhC,yFACkBJ,IAAAA,IAAA,mBACTE,EADS,YACUC,GAC/B,CACEE,OAAQ,CACNC,KAAMF,KALP,uBACGG,EADH,EACGA,KADH,kBAUEA,EAAKC,SAVP,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,yFACkBV,IAAAA,IAAA,gBAA2B,CAChDK,OAAQ,CACNM,MAAOD,KAHN,uBACGH,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kEAUA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBb,IAAAA,IAAA,iBAAoBa,GAAW,CACpDR,OAAQ,CACNS,SAAUD,KAHT,uBACGN,EADH,EACGA,KADH,kBAOEA,GAPF,kEAUA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAmCF,GAAnC,yFACkBb,IAAAA,IAAA,iBAAoBa,EAApB,YAAuC,CAC5DR,OAAQ,CACNS,SAAUD,KAHT,uBACGN,EADH,EACGA,KADH,kBAOEA,EAAKS,MAPP,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BJ,GAA/B,yFACkBb,IAAAA,IAAA,iBAAoBa,EAApB,YAAuC,CAC5DR,OAAQ,CACNS,SAAUD,KAHT,uBACGN,EADH,EACGA,KADH,kBAOEA,EAAKC,SAPP,kE","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Home/HomePage.styled.js","pages/Home/HomePage.jsx","services/ApiRequests.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nexport const MoviesList = styled.ul`\n  padding: 5px 20px;\n`;\nexport const MovieItem = styled.li`\n  padding: 5px;\n  border-bottom: 1px solid gray;\n  box-shadow: 2px 2px 2px grey;\n`;\nexport const MovieLink = styled(NavLink)`\n  color: rgb(97, 79, 7);\n  text-decoration: none;\n  font-weight: 700;\n\n  transition: all 500ms ease-out;\n  &.active {\n    color: crimson;\n  }\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    color: crimson;\n  }\n`;\n","// import React from 'react'\nimport PropTypes from 'prop-types';\nimport { MovieItem, MovieLink, MoviesList } from './MovieList.styled';\n\nconst MovieList = ({ movies, path }) => {\n  // console.log(path);\n\n  return (\n    <MoviesList>\n      {movies.map(movie => (\n        <MovieItem key={movie.id}>\n          <MovieLink\n            to={`${path.pathname === '/home' || '/' ? '/movies/' : ''}${\n              movie.id\n            }`}\n            state={{ from: path }}\n          >\n            {movie.title || movie.name}{' '}\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </MoviesList>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default MovieList;\n","import styled from 'styled-components';\n// import { NavLink } from 'react-router-dom';\n\nexport const HomeContainer = styled.div`\n  margin-bottom: 20px;\n  padding: 5px 20px;\n`;\nexport const Tittle = styled.h1`\n  padding: 5px 20px;\n  cursor: pointer;\n  transition: all 500ms ease-out;\n  &:hover {\n    color: crimson;\n    transform: scale(1.02);\n  }\n`;\n// export const MoviesList = styled.ul`\n//   padding: 5px 20px;\n// `;\n// export const MovieItem = styled.li`\n//   padding: 5px;\n//   border-bottom: 1px solid gray;\n//   box-shadow: 2px 2px 2px grey;\n// `;\n// export const MovieLink = styled(NavLink)`\n//   color: rgb(97, 79, 7);\n//   text-decoration: none;\n//   font-weight: 700;\n\n//   transition: all 500ms ease-out;\n//   &.active {\n//     color: crimson;\n//   }\n//   :hover:not(.active),\n//   :focus-visible:not(.active) {\n//     color: crimson;\n//   }\n// `;\n","import { useEffect, useState } from 'react';\n// import PropTypes from 'prop-types';\nimport { getTrendingMedia } from 'services/ApiRequests';\nimport { useLocation } from 'react-router-dom';\nimport Spiner from 'components/Spiner/Spiner';\nimport MovieList from 'components/MovieList/MovieList';\n\nimport {\n  HomeContainer,\n  Tittle,\n  // MoviesList,\n  // MovieItem,\n  // MovieLink,\n} from './HomePage.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const location = useLocation();\n  // console.log(location.pathname);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const result = await getTrendingMedia();\n        setMovies(result);\n      } catch (error) {\n        setError(true);\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <HomeContainer>\n      <Tittle>Trending this week</Tittle>\n      {loading && <Spiner />}\n      {movies.length > 0 && (\n        <MovieList movies={movies} path={location} />\n        // <MoviesList>\n        //   {movies.map(movie => (\n        //     <MovieItem key={movie.id}>\n        //       <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n        //         {movie.title || movie.name}{' '}\n        //       </MovieLink>\n        //     </MovieItem>\n        //   ))}\n        // </MoviesList>\n      )}\n      {error && (\n        <p>Something went wrong, please reload the page and try again</p>\n      )}\n    </HomeContainer>\n  );\n};\n\n// Home.propTypes = {};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'f52fb5605503f66e762d80f647488744',\n};\n\nconst mediaType = { all: 'all', movie: 'movie', tv: 'tv', person: 'person' };\nconst timeWindow = { day: 'day', week: 'week' };\n\nexport async function getTrendingMedia(pageNamber) {\n  const { data } = await axios.get(\n    `trending/${mediaType.movie}/${timeWindow.week}`,\n    {\n      params: {\n        page: pageNamber,\n      },\n    }\n  );\n\n  return data.results;\n}\n\nexport async function getSearchMovies(searchParam) {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query: searchParam,\n    },\n  });\n  // console.log(data);\n  return data.results;\n}\n\nexport async function getAllInfoMovies(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data);\n  return data;\n}\n\nexport async function getMoviesActorsCast(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.cast);\n  return data.cast;\n}\n\nexport async function getMoviesReview(movieId) {\n  const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      movie_id: movieId,\n    },\n  });\n  // console.log(data.results);\n  return data.results;\n}\n\nexport const useApi = () => {\n  return {\n    getTrendingMedia,\n    getSearchMovies,\n    getAllInfoMovies,\n    getMoviesActorsCast,\n    getMoviesReview,\n  };\n};\n"],"names":["MoviesList","styled","MovieItem","MovieLink","NavLink","movies","path","map","movie","to","pathname","id","state","from","title","name","HomeContainer","Tittle","useState","setMovies","loading","setLoading","error","setError","location","useLocation","useEffect","getTrendingMedia","result","console","Spiner","length","MovieList","axios","api_key","mediaType","timeWindow","pageNamber","params","page","data","results","getSearchMovies","searchParam","query","getAllInfoMovies","movieId","movie_id","getMoviesActorsCast","cast","getMoviesReview"],"sourceRoot":""}